generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PlayingStatus {
  id            Int    @id @default(autoincrement())
  guild         String
  status_type   String
  status_string String
}

model PlaylistSong {
  id                Int         @id @default(autoincrement())
  music_playlist_id Int
  provider          String
  query             String?
  title             String
  uri               String
  playlists         playlists   @relation(fields: [music_playlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model playlists {
  id            Int             @id(map: "PK_playlists") @default(autoincrement())
  guild         String
  author        String?
  author_id     Int?
  name          String?
  playlist_song PlaylistSong[]
}

model settings {
  guild    String               @id
  settings Json
}

model Warn {
  id            String          @id
  targetId      String
  guildId       String
  date          DateTime
  expiration    DateTime
  mod           String
  reason        String?
  severity      Int
  guild         GuildWarns      @relation("Warns", fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model WarnAction {
  id          String            @id
  action      String
  severity    Int
  expiration  Int?
  guildId     String
  warnActionId    GuildWarns    @relation("WarnActions", fields: [action], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model GuildWarns {
  id        String              @id
  warns     Warn[]              @relation("Warns")
  actions   WarnAction[]        @relation("WarnActions")
}